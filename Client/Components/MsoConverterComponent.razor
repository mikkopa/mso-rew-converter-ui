@* Example Blazor component for MSO conversion *@

@inject IJSRuntime JSRuntime

<div class="mso-converter">
    <h3>MSO to REW Converter</h3>

    <p>Convert your MSO filter settings to REW format easily. Use RBJ Q values for StormAudio compatibility.</p>
    <div>
        In MSO:
        <ol>
            <li>Select "Show Filter Report (Abbreviated)" to get the filters.</li>
            <li>Copy the report content.</li>
        </ol>
        In here:
        <ol>
            <li>Paste the MSO filter content into the text area below or use the file selector to load a text file containing the MSO filter report data.</li>
            <li>Adjust the conversion options as needed.</li>
            <li>Click the Convert button.</li>
        </ol>
    </div>

    <p>When using the values in a processor, remember to check and set the delays from the MSO Filter Report.</p>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>MSO Filter Content</h5>
                </div>
                <div class="card-body">
                    <div class="file-input-container mb-3">
                        <label for="fileInput" class="form-label">Load from file:</label>
                        <div class="input-group">
                            <input type="file" 
                                   @ref="fileInputRef"
                                   @onchange="OnFileSelected" 
                                   id="fileInput" 
                                   class="form-control" 
                                   accept=".txt" />
                            <button type="button" 
                                    class="btn btn-outline-secondary" 
                                    @onclick="ClearFile">
                                Clear
                            </button>
                        </div>
                        <div class="form-text">Select a .txt file containing MSO filter data</div>
                    </div>

                    <textarea @bind="msoContent" 
                              @bind:event="oninput"
                              @onchange="ValidateContent"
                              class="form-control" 
                              rows="15" 
                              placeholder="Paste your MSO filter content here..."></textarea>
                    
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-warning mt-2">
                            @validationMessage
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Conversion Options</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Equalizer Name</label>
                        <input @bind="options.EqualiserName" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Q Value Type</label>
                        <select @bind="options.QType" class="form-select">
                            <option value="@QValueType.RBJ">RBJ (Recommended)</option>
                            <option value="@QValueType.Classic">Classic</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <input @bind="options.CombineShared" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">
                                Combine Shared Filters
                            </label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Include Filter Types</label>
                        <div class="form-check">
                            <input @bind="options.IncludeParametricEQ" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">Parametric EQ</label>
                        </div>
                        <div class="form-check">
                            <input @bind="options.IncludeAllPass" class="form-check-input" type="checkbox" />
                            <label class="form-check-label">All-Pass Filters</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Delay Display</label>
                        <div class="input-group">
                            <select @bind="options.DelayDisplayUnit" class="form-select">
                                <option value="@DelayUnit.Milliseconds">Milliseconds</option>
                                <option value="@DelayUnit.Meters">Meters</option>
                                <option value="@DelayUnit.Feet">Feet</option>
                            </select>
                            <input class="form-control" type="number" step="0.01" @bind="options.DelayOffset" title="Offset in selected unit" />
                        </div>
                        <div class="form-text">Select unit to display delays and provide an offset to add to all delay values (applied in selected unit).</div>
                    </div>

                    <button @onclick="ConvertMso" 
                            class="btn btn-primary w-100" 
                            disabled="@(isConverting || string.IsNullOrWhiteSpace(msoContent))">
                        @if (isConverting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Convert
                    </button>

                    @if (preview != null)
                    {
                        <div class="alert alert-info mt-3">
                            <strong>Preview:</strong><br />
                            <span>Channels: @preview.ChannelCount</span><br />
                            <span>Total Filters: @preview.TotalFilters</span><br />
                            <span title="If 'Yes' then a shared filter will be saved to a different file">Shared Filters: @(preview.HasSharedFilters ? "Yes" : "No")</span><br />
                            <span>Gain Settings: @preview.GainSettingsCount channels</span><br />
                            <span>Delay Settings: @preview.DelaySettingsCount channels</span><br />
                            <span>Inversions: @(preview.HasInversions ? "Yes" : "No")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (conversionResult != null)
    {
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Conversion Results</h5>
                <button @onclick="DownloadAllFiles" class="btn btn-success btn-sm">
                    Download All Files
                </button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">

                            <div class="card mt-3">
                                <div class="card-body">
                                    <p>Add manual filters. Click Download or Download All Files to get the manual filters applied. The manual filters are added first and then the filters that are read from MSO Filter Content.</p>
                                </div>
                            </div>

                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0">Manual Shared Filters (will be prepended to all channel files)</h6>
                                </div>
                                <div class="card-body">
                                    <textarea class="form-control" rows="4" @bind="manualSharedFilters" placeholder="Enter manual filters for shared block..."></textarea>
                                </div>
                            </div>

                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0">Manual Channel Filters</h6>
                                </div>
                                <div class="card-body">
                                    @if (preview?.ChannelNames != null && preview.ChannelNames.Any())
                                    {
                                        foreach (var ch in preview.ChannelNames)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">@ch</label>
                                                <textarea class="form-control" rows="3" @bind="manualChannelFilters[ch]" placeholder="Enter manual filters for @ch..."></textarea>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-muted">No channels parsed yet</div>
                                    }
                                </div>
                            </div>
                    </div>
                    <div class="col-md-6">
                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0">Processing Log</h6>
                                </div>
                                <div class="card-body">
                                    <pre class="bg-light p-3" style="max-height: 300px; overflow-y: auto;">@conversionResult.GetFormattedLog()</pre>
                                </div>
                            </div>

                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0">Generated Files</h6>
                                </div>
                                <div class="card-body">
                                    <div class="list-group">
                                        @foreach (var file in conversionResult.GetDownloadFiles())
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <span>@file.FileName</span>
                                                <button @onclick="() => DownloadFile(file)" class="btn btn-outline-primary btn-sm">
                                                    Download
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                    </div>
                </div>
                
                @* Gain and Delay Settings Section *@
                @if (conversionResult.GainSettings.Any() || conversionResult.DelaySettings.Any() || conversionResult.Inversions.HasInversions)
                {
                    <div class="row mt-4 channel-settings">
                        <div class="col-12">
                            <h6>Channel Settings</h6>
                            <div class="row">
                                @if (conversionResult.GainSettings.Any())
                                {
                                    <div class="col-md-4">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0">Gain Settings</h6>
                                            </div>
                                            <div class="card-body">
                                                @foreach (var gainSetting in conversionResult.GainSettings)
                                                {
                                                    <div class="d-flex justify-content-between">
                                                        <span>@gainSetting.ChannelName:</span>
                                                        <span>@gainSetting.GainValue.ToString("F2") dB</span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                
                                @if (conversionResult.DelaySettings.Any())
                                {
                                    <div class="col-md-4">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0">Delay Settings</h6>
                                            </div>
                                            <div class="card-body">
                                                @foreach (var delaySetting in conversionResult.DelaySettings)
                                                {
                                                    double displayValue = ConvertDelayForDisplay(delaySetting.DelayValue, options.DelayDisplayUnit);
                                                    <div class="d-flex justify-content-between">
                                                        <span>@delaySetting.ChannelName:</span>
                                                        <span>@displayValue.ToString("F2") @GetDelayUnitLabel(options.DelayDisplayUnit)</span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                
                                @if (conversionResult.Inversions.HasInversions)
                                {
                                    <div class="col-md-4">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0">Channel Inversions</h6>
                                            </div>
                                            <div class="card-body">
                                                @foreach (var channel in conversionResult.Inversions.InvertedChannels)
                                                {
                                                    <div class="text-warning">
                                                        <i class="bi bi-arrow-clockwise"></i>
                                                        @channel inverted
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-4">
                                        <div class="card">
                                            <div class="card-header">
                                                <h6 class="mb-0">Channel Inversions</h6>
                                            </div>
                                            <div class="card-body">
                                                <span class="text-muted">No inversions</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string msoContent = string.Empty;
    private string validationMessage = string.Empty;
    private ConversionOptionsUI options = new();
    private MsoConversionService conversionService = new();
    private ConversionResult? conversionResult;
    private ConversionPreview? preview;
    // Manual filter text entered by the user per channel (key = channel name)
    private Dictionary<string, string> manualChannelFilters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
    // Manual shared filters to prepend to all channels
    private string manualSharedFilters = string.Empty;
    private bool isConverting = false;
    private ElementReference fileInputRef;

    protected override void OnInitialized()
    {
        // Load saved options from localStorage if available
        LoadSavedOptions();
    }

    private async Task OnFileSelected(ChangeEventArgs e)
    {
        var file = await JSRuntime.InvokeAsync<IJSObjectReference>("getSelectedFile", fileInputRef);
        if (file != null)
        {
            await ReadFileContent(file);
        }
    }

    private async Task ReadFileContent(IJSObjectReference file)
    {
        try
        {
            var content = await JSRuntime.InvokeAsync<string>("readFileAsText", file);
            if (!string.IsNullOrWhiteSpace(content))
            {
                msoContent = content;
                ValidateContent();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            validationMessage = $"Error reading file: {ex.Message}";
            StateHasChanged();
        }
    }

    private void ClearFile()
    {
        msoContent = string.Empty;
        validationMessage = string.Empty;
        preview = null;
        conversionResult = null;
        StateHasChanged();
    }

    private void ValidateContent()
    {
        if (string.IsNullOrWhiteSpace(msoContent))
        {
            validationMessage = string.Empty;
            preview = null;
            return;
        }

        var validation = conversionService.ValidateMsoContent(msoContent);
        validationMessage = validation.IsValid ? string.Empty : validation.ErrorMessage ?? string.Empty;

        if (validation.IsValid)
        {
            preview = conversionService.GetConversionPreview(msoContent, options);
            // Initialize manual filter inputs for channels found in preview if not already present
            if (preview != null && preview.ChannelNames != null)
            {
                foreach (var ch in preview.ChannelNames)
                {
                    if (!manualChannelFilters.ContainsKey(ch))
                        manualChannelFilters[ch] = string.Empty;
                }
            }
        }
        else
        {
            preview = null;
        }
    }

    private async Task ConvertMso()
    {
        if (string.IsNullOrWhiteSpace(msoContent))
            return;

        isConverting = true;
        StateHasChanged();

        try
        {
            await Task.Delay(100); // Small delay to show loading state
            conversionResult = conversionService.ConvertMso(msoContent, options);
            
            // Save options to localStorage
            await SaveOptions();
        }
        finally
        {
            isConverting = false;
            StateHasChanged();
        }
    }

    private async Task DownloadFile(FileDownloadInfo file)
    {
    // Rebuild file content with manual filters merged into filter list and renumbered
    var rebuilt = BuildFileWithManualFilters(file.FileName, file.Content);
    var bytes = System.Text.Encoding.UTF8.GetBytes(rebuilt);
        var base64 = Convert.ToBase64String(bytes);
        
        await JSRuntime.InvokeVoidAsync("downloadFile", file.FileName, base64, file.MimeType);
    }

    // Build file content by merging manual shared and per-channel filters into the generated file's filter list
    private string BuildFileWithManualFilters(string fileName, string originalContent)
    {
        try
        {
            var channelName = fileName.Replace("_filters.txt", "", StringComparison.OrdinalIgnoreCase);

            // Split manual inputs into lines
            var manualLines = new List<string>();
            if (!string.IsNullOrWhiteSpace(manualSharedFilters))
            {
                manualLines.AddRange(SplitLines(manualSharedFilters));
            }
            if (manualChannelFilters.TryGetValue(channelName, out var manualChannel) && !string.IsNullOrWhiteSpace(manualChannel))
            {
                manualLines.AddRange(SplitLines(manualChannel));
            }

            // Split original content into lines
            var lines = originalContent.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).ToList();

            // Find first filter line index
            var filterIndex = lines.FindIndex(l => System.Text.RegularExpressions.Regex.IsMatch(l.TrimStart(), "^Filter\\s*\\d+\\s*:", System.Text.RegularExpressions.RegexOptions.IgnoreCase));
            List<string> headerLines;
            List<string> existingFilterLines = new List<string>();

            if (filterIndex >= 0)
            {
                headerLines = lines.Take(filterIndex).ToList();
                existingFilterLines = lines.Skip(filterIndex).Where(l => !string.IsNullOrWhiteSpace(l)).ToList();
            }
            else
            {
                // No filter lines found - treat whole content as header
                headerLines = lines;
            }

            // Extract filter bodies (everything after the first ':' in a filter line) from existing filters
            var existingBodies = new List<string>();
            foreach (var fl in existingFilterLines)
            {
                var m = System.Text.RegularExpressions.Regex.Match(fl, "^Filter\\s*\\d+\\s*:\\s*(.*)$", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (m.Success)
                {
                    existingBodies.Add(m.Groups[1].Value.Trim());
                }
                else
                {
                    // If line doesn't match, include raw trimmed line as body
                    existingBodies.Add(fl.Trim());
                }
            }

            // Process manual lines into bodies: accept lines that either start with 'Filter N:' or raw filter body lines
            var manualBodies = new List<string>();
            foreach (var ml in manualLines)
            {
                var trimmed = ml.Trim();
                if (string.IsNullOrEmpty(trimmed)) continue;

                var m = System.Text.RegularExpressions.Regex.Match(trimmed, "^Filter\\s*\\d+\\s*:\\s*(.*)$", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                if (m.Success)
                {
                    manualBodies.Add(m.Groups[1].Value.Trim());
                }
                else
                {
                    // If user provided a line without 'Filter N:' prefix, treat whole line as body
                    manualBodies.Add(trimmed);
                }
            }

            // Combine manual bodies first, then existing bodies
            var combined = new List<string>();
            combined.AddRange(manualBodies);
            combined.AddRange(existingBodies);

            // If there are no combined filters, return original content unchanged
            if (!combined.Any())
            {
                return originalContent;
            }

            // Rebuild content: header + renumbered Filter lines
            var sb = new System.Text.StringBuilder();
            foreach (var h in headerLines)
            {
                sb.AppendLine(h);
            }

            int idx = 1;
            foreach (var body in combined)
            {
                sb.AppendLine($"Filter {idx}: {body}");
                idx++;
            }

            return sb.ToString();
        }
        catch
        {
            // On error, return original content
            return originalContent;
        }
    }

    private IEnumerable<string> SplitLines(string s)
    {
        return s.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None).Select(l => l?.TrimEnd() ?? "");
    }

    private async Task DownloadAllFiles()
    {
        if (conversionResult == null) return;

        var files = conversionResult.GetDownloadFiles();
        foreach (var file in files)
        {
            await DownloadFile(file);
            await Task.Delay(100); // Small delay between downloads
        }
    }

    private async Task SaveOptions()
    {
        try
        {
            var json = conversionService.SerializeOptions(options);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "msoConverterOptions", json);
        }
        catch
        {
            // Ignore localStorage errors
        }
    }

    private async void LoadSavedOptions()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "msoConverterOptions");
            if (!string.IsNullOrEmpty(json))
            {
                var savedOptions = conversionService.DeserializeOptions(json);
                if (savedOptions != null)
                {
                    options = savedOptions;
                    StateHasChanged();
                }
            }
        }
        catch
        {
            // Ignore localStorage errors
        }
    }

    // Convert stored delay in milliseconds to the value to display according to the selected unit
    private double ConvertDelayForDisplay(double delayMs, DelayUnit unit)
    {
        // Assumption: delayMs is a time delay in milliseconds
        // For distance units, convert time to distance using speed of sound ~343 m/s
        const double speedOfSound_m_per_s = 343.0;

        double result;
        switch (unit)
        {
            case DelayUnit.Milliseconds:
                result = delayMs + options.DelayOffset; // offset is in ms
                break;
            case DelayUnit.Meters:
                // Convert ms to seconds, then to meters. offset is in meters
                result = (delayMs / 1000.0) * speedOfSound_m_per_s + options.DelayOffset;
                break;
            case DelayUnit.Feet:
                // Convert ms -> meters -> feet, then add offset in feet
                var meters = (delayMs / 1000.0) * speedOfSound_m_per_s;
                result = meters * 3.28084 + options.DelayOffset;
                break;
            default:
                result = delayMs + options.DelayOffset;
                break;
        }

        return result;
    }

    private string GetDelayUnitLabel(DelayUnit unit)
    {
        return unit switch
        {
            DelayUnit.Milliseconds => "ms",
            DelayUnit.Meters => "m",
            DelayUnit.Feet => "ft",
            _ => "",
        };
    }
}

<script>
    window.downloadFile = (filename, base64Content, mimeType) => {
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', `data:${mimeType};base64,${base64Content}`);
        linkElement.setAttribute('download', filename);
        linkElement.style.display = 'none';
        document.body.appendChild(linkElement);
        linkElement.click();
        document.body.removeChild(linkElement);
    };

    window.getSelectedFile = (fileInput) => {
        if (fileInput && fileInput.files && fileInput.files.length > 0) {
            return fileInput.files[0];
        }
        return null;
    };

    window.readFileAsText = (file) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(reader.error);
            reader.readAsText(file);
        });
    };
</script>

<style>
    .mso-converter {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .card {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e0e0e0;
    }

    pre {
        font-size: 0.875rem;
        border-radius: 0.375rem;
    }

    .list-group-item {
        border: 1px solid #e0e0e0;
    }

    .alert {
        border-radius: 0.375rem;
    }

    .btn {
        border-radius: 0.375rem;
    }

    .form-control, .form-select {
        border-radius: 0.375rem;
    }

    /* File input styles */
    .file-input-container .form-text {
        font-size: 0.875rem;
        color: #6c757d;
    }

    /* File input styling */
    .input-group .form-control[type="file"] {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .input-group .btn-outline-secondary {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        border-left: 0;
    }

    /* Channel settings styling */
    .channel-settings .card {
        height: 100%;
        margin-bottom: 1rem;
    }

    .channel-settings .card-header h6 {
        margin: 0;
        font-weight: 600;
    }

    .channel-settings .card-body {
        padding: 0.75rem;
    }

    .channel-settings .d-flex {
        padding: 0.25rem 0;
        border-bottom: 1px solid #f8f9fa;
    }

    .channel-settings .d-flex:last-child {
        border-bottom: none;
    }
</style>
